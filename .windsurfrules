
# Gelinlik Model Tanıtım Sitesi - Proje Kuralları

## 🎯 Proje Genel Bilgileri
- Bu bir gelinlik modeli tanıtım sitesidir
- Hedef kitle: gelinlik arayan genç ve yetişkin kadınlar
- React (Vite) kullanılacak, Next.js kesinlikle kullanılmayacak
- Mevcut Header.jsx dosyası korunmalı ve kullanılmalı

## 🎨 Tasarım ve Stil Kuralları

### Renk Paleti
- Romantik, şık ve zarif renkler tercih et
- Beyaz, krem, pudra tonları, pastel pembe, altın rengi gibi soft tonlar kullan
- Vurgu renkleri için şeffaf altın tonları veya koyu pembe kullanılabilir
- Örnek renkler: #fffaf6, #fbe8e8, #f7d1d1, #bfa5a0, #8c6d62

### Tipografi
- Zarif ve okunabilir fontlar kullan
- Font ağırlıkları: 300-600 arası (ince ve yarı kalın tercih edilir)
- Font family: "Playfair Display", serif, veya "Poppins", sans-serif gibi modern ama romantik fontlar

### Görünüm
- Minimal, temiz ve şık tasarım
- Bol boşluk kullan, öğeleri nefes aldır
- Yumuşak gölgeler ve hafif border-radius ile zariflik kat
- Görseller ön planda olacak, yüksek kaliteli ve detaylı

## 🔧 Teknik Kurallar

### React Kuralları
- Fonksiyonel component'ler (function declaration) kullan
- Component dosya isimleri PascalCase ve .jsx uzantılı olacak
- Her component ayrı dosyada olacak

### Component Yapısı
- Ana componentler:
  - Header.jsx (varsa mevcut kullanılacak)
  - Home.jsx (ana sayfa)
  - Gallery.jsx (gelinlik modellerinin görsel galerisi)
  - About.jsx (hakkımızda / marka hikayesi)
  - Contact.jsx (iletişim formu)
  - Footer.jsx
- Bütün componentler `/src/components/` klasöründe olacak

### Dosya Yapısı
```
src/
├── components/
│   ├── Header.jsx
│   ├── Home.jsx
|   ├── About.jsx
│   ├── Contact.jsx
|   ├── Footer.jsx
│   └── ...
├── pages/
├── assets/
│   ├── images/
│   ├── fonts/
│   └── icons/
└── utils/
```

### JavaScript Kuralları
- Basit, anlaşılır, temiz kod
- Karmaşık çözümler yerine basit yolları tercih et
- ES6+ özellikleri (arrow functions, destructuring) kullanılacak
- Anlamlı ve açıklayıcı değişken/fonksiyon isimleri (camelCase)

### State Yönetimi
- Karmaşık global state yoksa, local state kullanılabilir
- Redux Toolkit kullanma, basit state yeterli

## 📚 Kütüphane Kullanımı

- Tailwind CSS kullanılacak, tüm stiller utility class'ları ile yapılacak
- React Icons ve Material-UI (MUI) ikon kütüphaneleri kullanılabilir
- Next.js kesinlikle kullanılmayacak
- Başka CSS framework'leri kullanma (sadece Tailwind)

## 🎨 CSS ve Styling Kuralları

- Tailwind CSS ile responsive ve temiz tasarım
- Mobile-first tasarım
- Custom CSS yazmaktan kaçın
- Responsive design için Tailwind breakpoint'lerini kullan
- Hover efektleri ve transitionlar ile zarif etkileşimler
- Gerekirse animasyonlar hafif ve sade olmalı

## Responsive Design

- Mobile-first yaklaşım
- Breakpoint'ler: sm:, md:, lg:, xl:
- Her component responsive olmalı

## 📱 UX/UI Kuralları

- Kullanıcılar (özellikle gelin adayları) için kolay gezinme ve görsel öncelik
- Büyük, okunabilir yazı tipleri
- Görsel ağırlıklı tasarım, yüksek çözünürlüklü fotoğraflar
- Hızlı yüklenme ve performans optimizasyonu
- Erişilebilirlik (accessibility) kurallarına uy
- Kolay navigasyon

## 🔍 SEO ve Performans

- Semantic HTML etiketleri (header, main, footer, section vb.) kullanılacak
- Tüm görsellerde alt text olacak
- Meta tag ve sayfa başlıkları SEO dostu olacak
- Görseller optimize edilmiş ve lazy loading uygulanacak

## 📝 Kod Yazım Kuralları

- Component isimleri PascalCase (Gallery, ContactForm)
- Dosya isimleri PascalCase.jsx (Gallery.jsx)
- Değişken/fonksiyonlar camelCase (modelList, handleSubmit)
- Yorumlar Türkçe olacak
- Konsol loglar ve hata mesajları Türkçe

## Code Organization

- Import'ları üstte grupla
- Export'u dosya sonunda yap
- Prop'ları destructure et
- Clean code prensiplerini uygula

### Yorum Satırı Kuralları
- Her fonksiyon için 1-2 cümlelik açıklama yorum ekle
- Karmaşık kod bloklarının üstüne ne yaptığını açıkla
- Yorum satırları Türkçe olmalı
- Örnek format:
  ```javascript
  // Kullanıcı form verilerini doğrular ve gönderir
  const handleSubmit = (formData) => {
    // Form verilerini API'ye gönder
    submitToAPI(formData);
  }
  ```

### Dil Kuralları
- Tüm yorum satırları Türkçe olmalı
- Console.log mesajları Türkçe olsun
- Error mesajları Türkçe yazılsın
- Alert ve bildirim metinleri Türkçe olmalı
- Değişken ve fonksiyon isimleri İnglizce (camelCase)

## 🚀 Development Practices
- Component'leri küçük ve focused tut
- Reusable component'ler yaz
- Props validation kullan (propTypes)
- Console.log'ları production'da kaldır
- Error handling ekle

## 💡 Best Practices
- DRY (Don't Repeat Yourself) prensibini uygula
- Single Responsibility Principle
- Basit ve anlaşılır kod yaz
- Comment'ları gerektiğinde kullan
- Git commit message'larını açıklayıcı yaz

## 📋 Kod Dokümantasyon Kuralları
- Her component'in başına ne yaptığını açıklayan yorum ekle
- Prop'ların ne olduğunu açıkla
- Önemli state değişkenleri için açıklama yaz
- API çağrıları öncesi ne yapıldığını belirt
- Örnek dokümantasyon:
  ```javascript
  /**
   * Avukat iletişim formu component'i
   * Kullanıcıdan ad, email ve mesaj alır
   */
  function ContactForm() {
    // Form gönderim durumunu takip eder
    const [isSubmitting, setIsSubmitting] = useState(false);
    
    // Form verilerini API'ye gönderir
    const handleSubmit = async (formData) => {
      // Gönderim başladığında yükleme göster
      setIsSubmitting(true);
    };
  }
  ```

